/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiAbout: STRAPI_ABOUTConnection;
  readonly allStrapiAboutDescriptionTextnode: STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiAffiliation: STRAPI_AFFILIATIONConnection;
  readonly allStrapiArea: STRAPI_AREAConnection;
  readonly allStrapiAreaDescriptionTextnode: STRAPI_AREA_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiAreaExploratrion: STRAPI_AREA_EXPLORATRIONConnection;
  readonly allStrapiFar: STRAPI_FARConnection;
  readonly allStrapiHero: STRAPI_HEROConnection;
  readonly allStrapiImageGrab: STRAPI_IMAGE_GRABConnection;
  readonly allStrapiJob: STRAPI_JOBConnection;
  readonly allStrapiJobDescriptionTextnode: STRAPI_JOB_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiLight: STRAPI_LIGHTConnection;
  readonly allStrapiLightGroup: STRAPI_LIGHT_GROUPConnection;
  readonly allStrapiLookbook: STRAPI_LOOKBOOKConnection;
  readonly allStrapiLookbookDescriptionTextnode: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly allStrapiMinimum: STRAPI_MINIMUMConnection;
  readonly allStrapiPlan: STRAPI_PLANConnection;
  readonly allStrapiProcess: STRAPI_PROCESSConnection;
  readonly allStrapiProcessMarkdownTextnode: STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection;
  readonly allStrapiProject: STRAPI_PROJECTConnection;
  readonly allStrapiProjectDescriptionTextnode: STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiQuality: STRAPI_QUALITYConnection;
  readonly allStrapiQualityDescriptionTextnode: STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiSeason: STRAPI_SEASONConnection;
  readonly allStrapiService: STRAPI_SERVICEConnection;
  readonly allStrapiServiceAfterTheTriptychTextnode: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection;
  readonly allStrapiServiceDescriptionTextnode: STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiServiceShowcasedescriptionTextnode: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection;
  readonly allStrapiShowcase: STRAPI_SHOWCASEConnection;
  readonly allStrapiShowcaseDescriptionTextnode: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiTeam: STRAPI_TEAMConnection;
  readonly allStrapiTeamBioTextnode: STRAPI_TEAM_BIO_TEXTNODEConnection;
  readonly allStrapiTestimonial: STRAPI_TESTIMONIALConnection;
  readonly allStrapiTopbar: STRAPI_TOPBARConnection;
  readonly allStrapiVendor: STRAPI_VENDORConnection;
  readonly allStrapiVenue: STRAPI_VENUEConnection;
  readonly allStrapiVenueAddressTextnode: STRAPI_VENUE_ADDRESS_TEXTNODEConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiAbout: Maybe<STRAPI_ABOUT>;
  readonly strapiAboutDescriptionTextnode: Maybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
  readonly strapiAffiliation: Maybe<STRAPI_AFFILIATION>;
  readonly strapiArea: Maybe<STRAPI_AREA>;
  readonly strapiAreaDescriptionTextnode: Maybe<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
  readonly strapiAreaExploratrion: Maybe<STRAPI_AREA_EXPLORATRION>;
  readonly strapiFar: Maybe<STRAPI_FAR>;
  readonly strapiHero: Maybe<STRAPI_HERO>;
  readonly strapiImageGrab: Maybe<STRAPI_IMAGE_GRAB>;
  readonly strapiJob: Maybe<STRAPI_JOB>;
  readonly strapiJobDescriptionTextnode: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly strapiLight: Maybe<STRAPI_LIGHT>;
  readonly strapiLightGroup: Maybe<STRAPI_LIGHT_GROUP>;
  readonly strapiLookbook: Maybe<STRAPI_LOOKBOOK>;
  readonly strapiLookbookDescriptionTextnode: Maybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
  readonly strapiMinimum: Maybe<STRAPI_MINIMUM>;
  readonly strapiPlan: Maybe<STRAPI_PLAN>;
  readonly strapiProcess: Maybe<STRAPI_PROCESS>;
  readonly strapiProcessMarkdownTextnode: Maybe<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
  readonly strapiProject: Maybe<STRAPI_PROJECT>;
  readonly strapiProjectDescriptionTextnode: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly strapiQuality: Maybe<STRAPI_QUALITY>;
  readonly strapiQualityDescriptionTextnode: Maybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
  readonly strapiSeason: Maybe<STRAPI_SEASON>;
  readonly strapiService: Maybe<STRAPI_SERVICE>;
  readonly strapiServiceAfterTheTriptychTextnode: Maybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
  readonly strapiServiceDescriptionTextnode: Maybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
  readonly strapiServiceShowcasedescriptionTextnode: Maybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
  readonly strapiShowcase: Maybe<STRAPI_SHOWCASE>;
  readonly strapiShowcaseDescriptionTextnode: Maybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
  readonly strapiTeam: Maybe<STRAPI_TEAM>;
  readonly strapiTeamBioTextnode: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly strapiTestimonial: Maybe<STRAPI_TESTIMONIAL>;
  readonly strapiTopbar: Maybe<STRAPI_TOPBAR>;
  readonly strapiVendor: Maybe<STRAPI_VENDOR>;
  readonly strapiVenue: Maybe<STRAPI_VENUE>;
  readonly strapiVenueAddressTextnode: Maybe<STRAPI_VENUE_ADDRESS_TEXTNODE>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStrapiAboutArgs = {
  filter: InputMaybe<STRAPI_ABOUTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ABOUTSortInput>>>;
};


type Query_allStrapiAboutDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiAffiliationArgs = {
  filter: InputMaybe<STRAPI_AFFILIATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AFFILIATIONSortInput>>>;
};


type Query_allStrapiAreaArgs = {
  filter: InputMaybe<STRAPI_AREAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AREASortInput>>>;
};


type Query_allStrapiAreaDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_AREA_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AREA_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiAreaExploratrionArgs = {
  filter: InputMaybe<STRAPI_AREA_EXPLORATRIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_AREA_EXPLORATRIONSortInput>>>;
};


type Query_allStrapiFarArgs = {
  filter: InputMaybe<STRAPI_FARFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FARSortInput>>>;
};


type Query_allStrapiHeroArgs = {
  filter: InputMaybe<STRAPI_HEROFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_HEROSortInput>>>;
};


type Query_allStrapiImageGrabArgs = {
  filter: InputMaybe<STRAPI_IMAGE_GRABFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_IMAGE_GRABSortInput>>>;
};


type Query_allStrapiJobArgs = {
  filter: InputMaybe<STRAPI_JOBFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_JOBSortInput>>>;
};


type Query_allStrapiJobDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiLightArgs = {
  filter: InputMaybe<STRAPI_LIGHTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LIGHTSortInput>>>;
};


type Query_allStrapiLightGroupArgs = {
  filter: InputMaybe<STRAPI_LIGHT_GROUPFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LIGHT_GROUPSortInput>>>;
};


type Query_allStrapiLookbookArgs = {
  filter: InputMaybe<STRAPI_LOOKBOOKFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOOKBOOKSortInput>>>;
};


type Query_allStrapiLookbookDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIASortInput>>>;
};


type Query_allStrapiMinimumArgs = {
  filter: InputMaybe<STRAPI_MINIMUMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_MINIMUMSortInput>>>;
};


type Query_allStrapiPlanArgs = {
  filter: InputMaybe<STRAPI_PLANFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PLANSortInput>>>;
};


type Query_allStrapiProcessArgs = {
  filter: InputMaybe<STRAPI_PROCESSFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROCESSSortInput>>>;
};


type Query_allStrapiProcessMarkdownTextnodeArgs = {
  filter: InputMaybe<STRAPI_PROCESS_MARKDOWN_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROCESS_MARKDOWN_TEXTNODESortInput>>>;
};


type Query_allStrapiProjectArgs = {
  filter: InputMaybe<STRAPI_PROJECTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROJECTSortInput>>>;
};


type Query_allStrapiProjectDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiQualityArgs = {
  filter: InputMaybe<STRAPI_QUALITYFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_QUALITYSortInput>>>;
};


type Query_allStrapiQualityDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiSeasonArgs = {
  filter: InputMaybe<STRAPI_SEASONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SEASONSortInput>>>;
};


type Query_allStrapiServiceArgs = {
  filter: InputMaybe<STRAPI_SERVICEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SERVICESortInput>>>;
};


type Query_allStrapiServiceAfterTheTriptychTextnodeArgs = {
  filter: InputMaybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODESortInput>>>;
};


type Query_allStrapiServiceDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiServiceShowcasedescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiShowcaseArgs = {
  filter: InputMaybe<STRAPI_SHOWCASEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SHOWCASESortInput>>>;
};


type Query_allStrapiShowcaseDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiTeamArgs = {
  filter: InputMaybe<STRAPI_TEAMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TEAMSortInput>>>;
};


type Query_allStrapiTeamBioTextnodeArgs = {
  filter: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TEAM_BIO_TEXTNODESortInput>>>;
};


type Query_allStrapiTestimonialArgs = {
  filter: InputMaybe<STRAPI_TESTIMONIALFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TESTIMONIALSortInput>>>;
};


type Query_allStrapiTopbarArgs = {
  filter: InputMaybe<STRAPI_TOPBARFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TOPBARSortInput>>>;
};


type Query_allStrapiVendorArgs = {
  filter: InputMaybe<STRAPI_VENDORFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_VENDORSortInput>>>;
};


type Query_allStrapiVenueArgs = {
  filter: InputMaybe<STRAPI_VENUEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_VENUESortInput>>>;
};


type Query_allStrapiVenueAddressTextnodeArgs = {
  filter: InputMaybe<STRAPI_VENUE_ADDRESS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_VENUE_ADDRESS_TEXTNODESortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAboutArgs = {
  addressLocality: InputMaybe<StringQueryOperatorInput>;
  addressRegion: InputMaybe<StringQueryOperatorInput>;
  alternateName: InputMaybe<StringQueryOperatorInput>;
  businessName: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  defaultImage: InputMaybe<StringQueryOperatorInput>;
  defaultImageAlt: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<STRAPI_ABOUTDescriptionFilterInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  geoLatitude: InputMaybe<FloatQueryOperatorInput>;
  geoLongitude: InputMaybe<FloatQueryOperatorInput>;
  geoRadius: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  itemType: InputMaybe<StringQueryOperatorInput>;
  openingHours: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  paymentAccepted: InputMaybe<StringQueryOperatorInput>;
  postalCode: InputMaybe<StringQueryOperatorInput>;
  priceRange: InputMaybe<StringQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slogan: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  telephone: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAboutDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiAffiliationArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiAreaArgs = {
  areas: InputMaybe<STRAPI_AREAFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_AREADescriptionFilterInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plans: InputMaybe<STRAPI_PLANFilterListInput>;
  project: InputMaybe<STRAPI_PROJECTFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  region: InputMaybe<STRAPI_AREAFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  state: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  tagline: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  venues: InputMaybe<STRAPI_VENUEFilterListInput>;
};


type Query_strapiAreaDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiAreaExploratrionArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiFarArgs = {
  answer: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  question: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiHeroArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiImageGrabArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiJobArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_JOBDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiJobDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiLightArgs = {
  alias: InputMaybe<StringQueryOperatorInput>;
  byline: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  detail: InputMaybe<STRAPI__MEDIAFilterInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  featured_service: InputMaybe<STRAPI_SERVICEFilterListInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  light_groups: InputMaybe<STRAPI_LIGHT_GROUPFilterListInput>;
  lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  lookbooks: InputMaybe<STRAPI_LOOKBOOKFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  outdoor: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  related: InputMaybe<STRAPI_LIGHTFilterInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  weddingOrder: InputMaybe<IntQueryOperatorInput>;
  xmasOrder: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiLightGroupArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  outdoor: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  weddingOrder: InputMaybe<IntQueryOperatorInput>;
  xmasOrder: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiLookbookArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_LOOKBOOKDescriptionFilterInput>;
  flex: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  project: InputMaybe<STRAPI_PROJECTFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  spread: InputMaybe<IntQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  venue: InputMaybe<STRAPI_VENUEFilterInput>;
};


type Query_strapiLookbookDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiMediaArgs = {
  alternativeText: InputMaybe<StringQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiMinimumArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  dollars: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiPlanArgs = {
  address: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jobber: InputMaybe<IntQueryOperatorInput>;
  jobbertakedown: InputMaybe<IntQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  notes: InputMaybe<STRAPI_PLANNotesFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  svg: InputMaybe<StringQueryOperatorInput>;
  takedownFlexOrder: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  zip: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiProcessArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  markdown: InputMaybe<STRAPI_PROCESSMarkdownFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiProcessMarkdownTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  markdown: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiProjectArgs = {
  areas: InputMaybe<STRAPI_AREAFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  darkImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  description: InputMaybe<STRAPI_PROJECTDescriptionFilterInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  gallery: InputMaybe<STRAPI__MEDIAFilterListInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  hero: InputMaybe<BooleanQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  ogimage: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  projected: InputMaybe<STRAPI_SHOWCASEFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  teams: InputMaybe<STRAPI_TEAMFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  vendors: InputMaybe<STRAPI_VENDORFilterListInput>;
  venue: InputMaybe<STRAPI_VENUEFilterInput>;
};


type Query_strapiProjectDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiQualityArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_QUALITYDescriptionFilterInput>;
  eyebrow: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiQualityDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiSeasonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  wedding: InputMaybe<BooleanQueryOperatorInput>;
};


type Query_strapiServiceArgs = {
  affiliation: InputMaybe<STRAPI_AFFILIATIONFilterInput>;
  after_the_triptych: InputMaybe<STRAPI_SERVICEAfter_the_triptychFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_SERVICEDescriptionFilterInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  featured_lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  hero_dark: InputMaybe<STRAPI__MEDIAFilterInput>;
  hero_light: InputMaybe<STRAPI__MEDIAFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  light_groups: InputMaybe<STRAPI_LIGHT_GROUPFilterListInput>;
  lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  lookbook: InputMaybe<STRAPI_LOOKBOOKFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  ogimage: InputMaybe<STRAPI__MEDIAFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  processes: InputMaybe<STRAPI_PROCESSFilterListInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  showcaseDescription: InputMaybe<STRAPI_SERVICEShowcaseDescriptionFilterInput>;
  showcases: InputMaybe<STRAPI_SHOWCASEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  triptych: InputMaybe<STRAPI__MEDIAFilterListInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  vendors: InputMaybe<STRAPI_VENDORFilterListInput>;
  venues: InputMaybe<STRAPI_VENUEFilterListInput>;
  videoMux: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiServiceAfterTheTriptychTextnodeArgs = {
  after_the_triptych: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiServiceDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiServiceShowcasedescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  showcaseDescription: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiShowcaseArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_SHOWCASEDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  price: InputMaybe<StringQueryOperatorInput>;
  project: InputMaybe<STRAPI_PROJECTFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  roofline: InputMaybe<StringQueryOperatorInput>;
  service: InputMaybe<STRAPI_SERVICEFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  tier: InputMaybe<StringQueryOperatorInput>;
  tree: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiShowcaseDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiTeamArgs = {
  avatar: InputMaybe<STRAPI__MEDIAFilterInput>;
  bio: InputMaybe<STRAPI_TEAMBioFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  plan: InputMaybe<STRAPI_PLANFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTeamBioTextnodeArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiTestimonialArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  customer: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  platform: InputMaybe<StringQueryOperatorInput>;
  position: InputMaybe<StringQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  review: InputMaybe<StringQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  stars: InputMaybe<IntQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  vendor: InputMaybe<STRAPI_VENDORFilterInput>;
  venue: InputMaybe<STRAPI_VENUEFilterInput>;
};


type Query_strapiTopbarArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiVendorArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  instagram: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pinterest: InputMaybe<StringQueryOperatorInput>;
  profile: InputMaybe<STRAPI__MEDIAFilterInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  service: InputMaybe<StringQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiVenueArgs = {
  address: InputMaybe<STRAPI_VENUEAddressFilterInput>;
  area: InputMaybe<STRAPI_AREAFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  phone: InputMaybe<FloatQueryOperatorInput>;
  projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  uses: InputMaybe<StringQueryOperatorInput>;
  venueImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  website: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiVenueAddressTextnodeArgs = {
  address: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ABOUT = Node & {
  readonly addressLocality: Maybe<Scalars['String']>;
  readonly addressRegion: Maybe<Scalars['String']>;
  readonly alternateName: Maybe<Scalars['String']>;
  readonly businessName: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly defaultImage: Maybe<Scalars['String']>;
  readonly defaultImageAlt: Maybe<Scalars['String']>;
  readonly description: Maybe<STRAPI_ABOUTDescription>;
  readonly email: Maybe<Scalars['String']>;
  readonly geoLatitude: Maybe<Scalars['Float']>;
  readonly geoLongitude: Maybe<Scalars['Float']>;
  readonly geoRadius: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly itemType: Maybe<Scalars['String']>;
  readonly openingHours: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly paymentAccepted: Maybe<Scalars['String']>;
  readonly postalCode: Maybe<Scalars['String']>;
  readonly priceRange: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slogan: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly telephone: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type STRAPI_ABOUT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ABOUT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ABOUT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ABOUTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUTEdge>;
  readonly group: ReadonlyArray<STRAPI_ABOUTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUTConnection_distinctArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_groupArgs = {
  field: STRAPI_ABOUTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUTConnection_maxArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_minArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_sumArgs = {
  field: STRAPI_ABOUTFieldSelector;
};

type STRAPI_ABOUTDescription = {
  readonly data: Maybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
};

type STRAPI_ABOUTDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_ABOUTDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_ABOUTDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_ABOUTEdge = {
  readonly next: Maybe<STRAPI_ABOUT>;
  readonly node: STRAPI_ABOUT;
  readonly previous: Maybe<STRAPI_ABOUT>;
};

type STRAPI_ABOUTFieldSelector = {
  readonly addressLocality: InputMaybe<FieldSelectorEnum>;
  readonly addressRegion: InputMaybe<FieldSelectorEnum>;
  readonly alternateName: InputMaybe<FieldSelectorEnum>;
  readonly businessName: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly defaultImage: InputMaybe<FieldSelectorEnum>;
  readonly defaultImageAlt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_ABOUTDescriptionFieldSelector>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly geoLatitude: InputMaybe<FieldSelectorEnum>;
  readonly geoLongitude: InputMaybe<FieldSelectorEnum>;
  readonly geoRadius: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly itemType: InputMaybe<FieldSelectorEnum>;
  readonly openingHours: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly paymentAccepted: InputMaybe<FieldSelectorEnum>;
  readonly postalCode: InputMaybe<FieldSelectorEnum>;
  readonly priceRange: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slogan: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly telephone: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ABOUTFilterInput = {
  readonly addressLocality: InputMaybe<StringQueryOperatorInput>;
  readonly addressRegion: InputMaybe<StringQueryOperatorInput>;
  readonly alternateName: InputMaybe<StringQueryOperatorInput>;
  readonly businessName: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly defaultImage: InputMaybe<StringQueryOperatorInput>;
  readonly defaultImageAlt: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_ABOUTDescriptionFilterInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly geoLatitude: InputMaybe<FloatQueryOperatorInput>;
  readonly geoLongitude: InputMaybe<FloatQueryOperatorInput>;
  readonly geoRadius: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly itemType: InputMaybe<StringQueryOperatorInput>;
  readonly openingHours: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly paymentAccepted: InputMaybe<StringQueryOperatorInput>;
  readonly postalCode: InputMaybe<StringQueryOperatorInput>;
  readonly priceRange: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slogan: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly telephone: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ABOUTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ABOUTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUTGroupConnection_distinctArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_groupArgs = {
  field: STRAPI_ABOUTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUTGroupConnection_maxArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_minArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_sumArgs = {
  field: STRAPI_ABOUTFieldSelector;
};

type STRAPI_ABOUTSortInput = {
  readonly addressLocality: InputMaybe<SortOrderEnum>;
  readonly addressRegion: InputMaybe<SortOrderEnum>;
  readonly alternateName: InputMaybe<SortOrderEnum>;
  readonly businessName: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly defaultImage: InputMaybe<SortOrderEnum>;
  readonly defaultImageAlt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_ABOUTDescriptionSortInput>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly geoLatitude: InputMaybe<SortOrderEnum>;
  readonly geoLongitude: InputMaybe<SortOrderEnum>;
  readonly geoRadius: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly itemType: InputMaybe<SortOrderEnum>;
  readonly openingHours: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly paymentAccepted: InputMaybe<SortOrderEnum>;
  readonly postalCode: InputMaybe<SortOrderEnum>;
  readonly priceRange: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slogan: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly telephone: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_ABOUT_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ABOUT_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_ABOUT_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_AFFILIATION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly logo: Maybe<STRAPI__MEDIA>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_AFFILIATION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AFFILIATION_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AFFILIATION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AFFILIATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AFFILIATIONEdge>;
  readonly group: ReadonlyArray<STRAPI_AFFILIATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AFFILIATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AFFILIATIONConnection_distinctArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONConnection_groupArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AFFILIATIONConnection_maxArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONConnection_minArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONConnection_sumArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};

type STRAPI_AFFILIATIONEdge = {
  readonly next: Maybe<STRAPI_AFFILIATION>;
  readonly node: STRAPI_AFFILIATION;
  readonly previous: Maybe<STRAPI_AFFILIATION>;
};

type STRAPI_AFFILIATIONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly logo: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AFFILIATIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_AFFILIATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AFFILIATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AFFILIATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AFFILIATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AFFILIATIONGroupConnection_distinctArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONGroupConnection_groupArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AFFILIATIONGroupConnection_maxArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONGroupConnection_minArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};


type STRAPI_AFFILIATIONGroupConnection_sumArgs = {
  field: STRAPI_AFFILIATIONFieldSelector;
};

type STRAPI_AFFILIATIONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly logo: InputMaybe<STRAPI__MEDIASortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_AREA = Node & {
  readonly areas: Maybe<ReadonlyArray<Maybe<STRAPI_AREA>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_AREADescription>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly plans: Maybe<ReadonlyArray<Maybe<STRAPI_PLAN>>>;
  readonly project: Maybe<STRAPI_PROJECT>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly region: Maybe<STRAPI_AREA>;
  readonly slug: Maybe<Scalars['String']>;
  readonly state: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly tagline: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly venues: Maybe<ReadonlyArray<Maybe<STRAPI_VENUE>>>;
};


type STRAPI_AREA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AREAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREAEdge>;
  readonly group: ReadonlyArray<STRAPI_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREAConnection_distinctArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAConnection_groupArgs = {
  field: STRAPI_AREAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREAConnection_maxArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAConnection_minArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAConnection_sumArgs = {
  field: STRAPI_AREAFieldSelector;
};

type STRAPI_AREADescription = {
  readonly data: Maybe<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
};

type STRAPI_AREADescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_AREADescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_AREA_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_AREADescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_AREA_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_AREAEdge = {
  readonly next: Maybe<STRAPI_AREA>;
  readonly node: STRAPI_AREA;
  readonly previous: Maybe<STRAPI_AREA>;
};

type STRAPI_AREAFieldSelector = {
  readonly areas: InputMaybe<STRAPI_AREAFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_AREADescriptionFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plans: InputMaybe<STRAPI_PLANFieldSelector>;
  readonly project: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly region: InputMaybe<STRAPI_AREAFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly state: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly tagline: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly venues: InputMaybe<STRAPI_VENUEFieldSelector>;
};

type STRAPI_AREAFilterInput = {
  readonly areas: InputMaybe<STRAPI_AREAFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_AREADescriptionFilterInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plans: InputMaybe<STRAPI_PLANFilterListInput>;
  readonly project: InputMaybe<STRAPI_PROJECTFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly region: InputMaybe<STRAPI_AREAFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly state: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly tagline: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly venues: InputMaybe<STRAPI_VENUEFilterListInput>;
};

type STRAPI_AREAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_AREAFilterInput>;
};

type STRAPI_AREAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AREAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREAGroupConnection_distinctArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAGroupConnection_groupArgs = {
  field: STRAPI_AREAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREAGroupConnection_maxArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAGroupConnection_minArgs = {
  field: STRAPI_AREAFieldSelector;
};


type STRAPI_AREAGroupConnection_sumArgs = {
  field: STRAPI_AREAFieldSelector;
};

type STRAPI_AREASortInput = {
  readonly areas: InputMaybe<STRAPI_AREASortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_AREADescriptionSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plans: InputMaybe<STRAPI_PLANSortInput>;
  readonly project: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly region: InputMaybe<STRAPI_AREASortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly state: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly tagline: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly venues: InputMaybe<STRAPI_VENUESortInput>;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_AREA_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_AREA_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_AREA_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_AREA_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_AREA_EXPLORATRION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_AREA_EXPLORATRION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_EXPLORATRION_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_AREA_EXPLORATRION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_AREA_EXPLORATRIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREA_EXPLORATRIONEdge>;
  readonly group: ReadonlyArray<STRAPI_AREA_EXPLORATRIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA_EXPLORATRION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREA_EXPLORATRIONConnection_distinctArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONConnection_groupArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREA_EXPLORATRIONConnection_maxArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONConnection_minArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONConnection_sumArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};

type STRAPI_AREA_EXPLORATRIONEdge = {
  readonly next: Maybe<STRAPI_AREA_EXPLORATRION>;
  readonly node: STRAPI_AREA_EXPLORATRION;
  readonly previous: Maybe<STRAPI_AREA_EXPLORATRION>;
};

type STRAPI_AREA_EXPLORATRIONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_AREA_EXPLORATRIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_AREA_EXPLORATRIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_AREA_EXPLORATRIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_AREA_EXPLORATRIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_AREA_EXPLORATRION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_AREA_EXPLORATRIONGroupConnection_distinctArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONGroupConnection_groupArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_AREA_EXPLORATRIONGroupConnection_maxArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONGroupConnection_minArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};


type STRAPI_AREA_EXPLORATRIONGroupConnection_sumArgs = {
  field: STRAPI_AREA_EXPLORATRIONFieldSelector;
};

type STRAPI_AREA_EXPLORATRIONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_FAR = Node & {
  readonly answer: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly question: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_FAR_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FAR_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FAR_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_FARConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FAREdge>;
  readonly group: ReadonlyArray<STRAPI_FARGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FAR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FARConnection_distinctArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARConnection_groupArgs = {
  field: STRAPI_FARFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FARConnection_maxArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARConnection_minArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARConnection_sumArgs = {
  field: STRAPI_FARFieldSelector;
};

type STRAPI_FAREdge = {
  readonly next: Maybe<STRAPI_FAR>;
  readonly node: STRAPI_FAR;
  readonly previous: Maybe<STRAPI_FAR>;
};

type STRAPI_FARFieldSelector = {
  readonly answer: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FARFilterInput = {
  readonly answer: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_FARGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FAREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_FARGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FAR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FARGroupConnection_distinctArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARGroupConnection_groupArgs = {
  field: STRAPI_FARFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FARGroupConnection_maxArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARGroupConnection_minArgs = {
  field: STRAPI_FARFieldSelector;
};


type STRAPI_FARGroupConnection_sumArgs = {
  field: STRAPI_FARFieldSelector;
};

type STRAPI_FARSortInput = {
  readonly answer: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_HERO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_HERO_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_HERO_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_HERO_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_HEROConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_HEROEdge>;
  readonly group: ReadonlyArray<STRAPI_HEROGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_HERO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_HEROConnection_distinctArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROConnection_groupArgs = {
  field: STRAPI_HEROFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_HEROConnection_maxArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROConnection_minArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROConnection_sumArgs = {
  field: STRAPI_HEROFieldSelector;
};

type STRAPI_HEROEdge = {
  readonly next: Maybe<STRAPI_HERO>;
  readonly node: STRAPI_HERO;
  readonly previous: Maybe<STRAPI_HERO>;
};

type STRAPI_HEROFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_HEROFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_HEROGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_HEROEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_HEROGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_HERO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_HEROGroupConnection_distinctArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROGroupConnection_groupArgs = {
  field: STRAPI_HEROFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_HEROGroupConnection_maxArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROGroupConnection_minArgs = {
  field: STRAPI_HEROFieldSelector;
};


type STRAPI_HEROGroupConnection_sumArgs = {
  field: STRAPI_HEROFieldSelector;
};

type STRAPI_HEROSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_IMAGE_GRAB = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_IMAGE_GRAB_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_IMAGE_GRAB_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_IMAGE_GRAB_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_IMAGE_GRABConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_IMAGE_GRABEdge>;
  readonly group: ReadonlyArray<STRAPI_IMAGE_GRABGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_IMAGE_GRAB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_IMAGE_GRABConnection_distinctArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABConnection_groupArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_IMAGE_GRABConnection_maxArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABConnection_minArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABConnection_sumArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};

type STRAPI_IMAGE_GRABEdge = {
  readonly next: Maybe<STRAPI_IMAGE_GRAB>;
  readonly node: STRAPI_IMAGE_GRAB;
  readonly previous: Maybe<STRAPI_IMAGE_GRAB>;
};

type STRAPI_IMAGE_GRABFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_IMAGE_GRABFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_IMAGE_GRABGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_IMAGE_GRABEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_IMAGE_GRABGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_IMAGE_GRAB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_IMAGE_GRABGroupConnection_distinctArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABGroupConnection_groupArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_IMAGE_GRABGroupConnection_maxArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABGroupConnection_minArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};


type STRAPI_IMAGE_GRABGroupConnection_sumArgs = {
  field: STRAPI_IMAGE_GRABFieldSelector;
};

type STRAPI_IMAGE_GRABSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_JOB = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_JOBDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_JOB_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_JOB_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_JOB_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_JOBConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOBEdge>;
  readonly group: ReadonlyArray<STRAPI_JOBGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOBConnection_distinctArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_groupArgs = {
  field: STRAPI_JOBFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOBConnection_maxArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_minArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_sumArgs = {
  field: STRAPI_JOBFieldSelector;
};

type STRAPI_JOBDescription = {
  readonly data: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
};

type STRAPI_JOBDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_JOBDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_JOBDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_JOBEdge = {
  readonly next: Maybe<STRAPI_JOB>;
  readonly node: STRAPI_JOB;
  readonly previous: Maybe<STRAPI_JOB>;
};

type STRAPI_JOBFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_JOBFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_JOBGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOBEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_JOBGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOBGroupConnection_distinctArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_groupArgs = {
  field: STRAPI_JOBFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOBGroupConnection_maxArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_minArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_sumArgs = {
  field: STRAPI_JOBFieldSelector;
};

type STRAPI_JOBSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_JOB_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_LIGHT = Node & {
  readonly alias: Maybe<Scalars['String']>;
  readonly byline: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly detail: Maybe<STRAPI__MEDIA>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly featured_service: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly light_groups: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT_GROUP>>>;
  readonly lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly lookbooks: Maybe<ReadonlyArray<Maybe<STRAPI_LOOKBOOK>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly outdoor: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly related: Maybe<STRAPI_LIGHT>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly weddingOrder: Maybe<Scalars['Int']>;
  readonly xmasOrder: Maybe<Scalars['Int']>;
};


type STRAPI_LIGHT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LIGHTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LIGHTEdge>;
  readonly group: ReadonlyArray<STRAPI_LIGHTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LIGHT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LIGHTConnection_distinctArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTConnection_groupArgs = {
  field: STRAPI_LIGHTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LIGHTConnection_maxArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTConnection_minArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTConnection_sumArgs = {
  field: STRAPI_LIGHTFieldSelector;
};

type STRAPI_LIGHTEdge = {
  readonly next: Maybe<STRAPI_LIGHT>;
  readonly node: STRAPI_LIGHT;
  readonly previous: Maybe<STRAPI_LIGHT>;
};

type STRAPI_LIGHTFieldSelector = {
  readonly alias: InputMaybe<FieldSelectorEnum>;
  readonly byline: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly detail: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly featured_service: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPFieldSelector>;
  readonly lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly lookbooks: InputMaybe<STRAPI_LOOKBOOKFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly outdoor: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly projects: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly related: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly weddingOrder: InputMaybe<FieldSelectorEnum>;
  readonly xmasOrder: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LIGHTFilterInput = {
  readonly alias: InputMaybe<StringQueryOperatorInput>;
  readonly byline: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly detail: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly featured_service: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPFilterListInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly lookbooks: InputMaybe<STRAPI_LOOKBOOKFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly outdoor: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly related: InputMaybe<STRAPI_LIGHTFilterInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly weddingOrder: InputMaybe<IntQueryOperatorInput>;
  readonly xmasOrder: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_LIGHTFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LIGHTFilterInput>;
};

type STRAPI_LIGHTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LIGHTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LIGHTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LIGHT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LIGHTGroupConnection_distinctArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTGroupConnection_groupArgs = {
  field: STRAPI_LIGHTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LIGHTGroupConnection_maxArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTGroupConnection_minArgs = {
  field: STRAPI_LIGHTFieldSelector;
};


type STRAPI_LIGHTGroupConnection_sumArgs = {
  field: STRAPI_LIGHTFieldSelector;
};

type STRAPI_LIGHTSortInput = {
  readonly alias: InputMaybe<SortOrderEnum>;
  readonly byline: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly detail: InputMaybe<STRAPI__MEDIASortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly featured_service: InputMaybe<STRAPI_SERVICESortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPSortInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly lookbooks: InputMaybe<STRAPI_LOOKBOOKSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly outdoor: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly related: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly weddingOrder: InputMaybe<SortOrderEnum>;
  readonly xmasOrder: InputMaybe<SortOrderEnum>;
};

type STRAPI_LIGHT_GROUP = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly outdoor: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly weddingOrder: Maybe<Scalars['Int']>;
  readonly xmasOrder: Maybe<Scalars['Int']>;
};


type STRAPI_LIGHT_GROUP_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_GROUP_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_GROUP_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LIGHT_GROUP_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LIGHT_GROUPConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LIGHT_GROUPEdge>;
  readonly group: ReadonlyArray<STRAPI_LIGHT_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LIGHT_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LIGHT_GROUPConnection_distinctArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPConnection_groupArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LIGHT_GROUPConnection_maxArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPConnection_minArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPConnection_sumArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};

type STRAPI_LIGHT_GROUPEdge = {
  readonly next: Maybe<STRAPI_LIGHT_GROUP>;
  readonly node: STRAPI_LIGHT_GROUP;
  readonly previous: Maybe<STRAPI_LIGHT_GROUP>;
};

type STRAPI_LIGHT_GROUPFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly outdoor: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly weddingOrder: InputMaybe<FieldSelectorEnum>;
  readonly xmasOrder: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LIGHT_GROUPFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly outdoor: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly weddingOrder: InputMaybe<IntQueryOperatorInput>;
  readonly xmasOrder: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_LIGHT_GROUPFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LIGHT_GROUPFilterInput>;
};

type STRAPI_LIGHT_GROUPGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LIGHT_GROUPEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LIGHT_GROUPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LIGHT_GROUP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LIGHT_GROUPGroupConnection_distinctArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPGroupConnection_groupArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LIGHT_GROUPGroupConnection_maxArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPGroupConnection_minArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};


type STRAPI_LIGHT_GROUPGroupConnection_sumArgs = {
  field: STRAPI_LIGHT_GROUPFieldSelector;
};

type STRAPI_LIGHT_GROUPSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly outdoor: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly weddingOrder: InputMaybe<SortOrderEnum>;
  readonly xmasOrder: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOOKBOOK = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_LOOKBOOKDescription>;
  readonly flex: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly project: Maybe<STRAPI_PROJECT>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly spread: Maybe<Scalars['Int']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly venue: Maybe<STRAPI_VENUE>;
};


type STRAPI_LOOKBOOK_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOOKBOOK_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOOKBOOK_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LOOKBOOKConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOOKBOOKEdge>;
  readonly group: ReadonlyArray<STRAPI_LOOKBOOKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOOKBOOK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOOKBOOKConnection_distinctArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKConnection_groupArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOOKBOOKConnection_maxArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKConnection_minArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKConnection_sumArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};

type STRAPI_LOOKBOOKDescription = {
  readonly data: Maybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
};

type STRAPI_LOOKBOOKDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_LOOKBOOKDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_LOOKBOOKDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_LOOKBOOKEdge = {
  readonly next: Maybe<STRAPI_LOOKBOOK>;
  readonly node: STRAPI_LOOKBOOK;
  readonly previous: Maybe<STRAPI_LOOKBOOK>;
};

type STRAPI_LOOKBOOKFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_LOOKBOOKDescriptionFieldSelector>;
  readonly flex: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly project: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly spread: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly venue: InputMaybe<STRAPI_VENUEFieldSelector>;
};

type STRAPI_LOOKBOOKFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_LOOKBOOKDescriptionFilterInput>;
  readonly flex: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly project: InputMaybe<STRAPI_PROJECTFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly spread: InputMaybe<IntQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly venue: InputMaybe<STRAPI_VENUEFilterInput>;
};

type STRAPI_LOOKBOOKFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LOOKBOOKFilterInput>;
};

type STRAPI_LOOKBOOKGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOOKBOOKEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOOKBOOKGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOOKBOOK>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOOKBOOKGroupConnection_distinctArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKGroupConnection_groupArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOOKBOOKGroupConnection_maxArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKGroupConnection_minArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};


type STRAPI_LOOKBOOKGroupConnection_sumArgs = {
  field: STRAPI_LOOKBOOKFieldSelector;
};

type STRAPI_LOOKBOOKSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_LOOKBOOKDescriptionSortInput>;
  readonly flex: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly project: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly spread: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly venue: InputMaybe<STRAPI_VENUESortInput>;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_LOOKBOOK_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_MINIMUM = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly dollars: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_MINIMUM_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_MINIMUM_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_MINIMUM_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_MINIMUMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MINIMUMEdge>;
  readonly group: ReadonlyArray<STRAPI_MINIMUMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MINIMUM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MINIMUMConnection_distinctArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMConnection_groupArgs = {
  field: STRAPI_MINIMUMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MINIMUMConnection_maxArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMConnection_minArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMConnection_sumArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};

type STRAPI_MINIMUMEdge = {
  readonly next: Maybe<STRAPI_MINIMUM>;
  readonly node: STRAPI_MINIMUM;
  readonly previous: Maybe<STRAPI_MINIMUM>;
};

type STRAPI_MINIMUMFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly dollars: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_MINIMUMFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly dollars: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_MINIMUMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_MINIMUMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_MINIMUMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_MINIMUM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_MINIMUMGroupConnection_distinctArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMGroupConnection_groupArgs = {
  field: STRAPI_MINIMUMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_MINIMUMGroupConnection_maxArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMGroupConnection_minArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};


type STRAPI_MINIMUMGroupConnection_sumArgs = {
  field: STRAPI_MINIMUMFieldSelector;
};

type STRAPI_MINIMUMSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly dollars: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_PLAN = Node & {
  readonly address: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jobber: Maybe<Scalars['Int']>;
  readonly jobbertakedown: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly notes: Maybe<STRAPI_PLANNotes>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly svg: Maybe<Scalars['String']>;
  readonly takedownFlexOrder: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly zip: Maybe<Scalars['Int']>;
};


type STRAPI_PLAN_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PLAN_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PLAN_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_PLANConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PLANEdge>;
  readonly group: ReadonlyArray<STRAPI_PLANGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PLAN>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PLANConnection_distinctArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANConnection_groupArgs = {
  field: STRAPI_PLANFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PLANConnection_maxArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANConnection_minArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANConnection_sumArgs = {
  field: STRAPI_PLANFieldSelector;
};

type STRAPI_PLANEdge = {
  readonly next: Maybe<STRAPI_PLAN>;
  readonly node: STRAPI_PLAN;
  readonly previous: Maybe<STRAPI_PLAN>;
};

type STRAPI_PLANFieldSelector = {
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jobber: InputMaybe<FieldSelectorEnum>;
  readonly jobbertakedown: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly notes: InputMaybe<STRAPI_PLANNotesFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly svg: InputMaybe<FieldSelectorEnum>;
  readonly takedownFlexOrder: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly zip: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_PLANFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jobber: InputMaybe<IntQueryOperatorInput>;
  readonly jobbertakedown: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly notes: InputMaybe<STRAPI_PLANNotesFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly svg: InputMaybe<StringQueryOperatorInput>;
  readonly takedownFlexOrder: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly zip: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_PLANFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PLANFilterInput>;
};

type STRAPI_PLANGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PLANEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PLANGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PLAN>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PLANGroupConnection_distinctArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANGroupConnection_groupArgs = {
  field: STRAPI_PLANFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PLANGroupConnection_maxArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANGroupConnection_minArgs = {
  field: STRAPI_PLANFieldSelector;
};


type STRAPI_PLANGroupConnection_sumArgs = {
  field: STRAPI_PLANFieldSelector;
};

type STRAPI_PLANNotes = {
  readonly data: Maybe<Scalars['String']>;
};

type STRAPI_PLANNotesFieldSelector = {
  readonly data: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_PLANNotesFilterInput = {
  readonly data: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_PLANNotesSortInput = {
  readonly data: InputMaybe<SortOrderEnum>;
};

type STRAPI_PLANSortInput = {
  readonly address: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jobber: InputMaybe<SortOrderEnum>;
  readonly jobbertakedown: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly notes: InputMaybe<STRAPI_PLANNotesSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly svg: InputMaybe<SortOrderEnum>;
  readonly takedownFlexOrder: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly zip: InputMaybe<SortOrderEnum>;
};

type STRAPI_PROCESS = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly markdown: Maybe<STRAPI_PROCESSMarkdown>;
  readonly name: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_PROCESS_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROCESS_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROCESS_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_PROCESSConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROCESSEdge>;
  readonly group: ReadonlyArray<STRAPI_PROCESSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROCESS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROCESSConnection_distinctArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSConnection_groupArgs = {
  field: STRAPI_PROCESSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROCESSConnection_maxArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSConnection_minArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSConnection_sumArgs = {
  field: STRAPI_PROCESSFieldSelector;
};

type STRAPI_PROCESSEdge = {
  readonly next: Maybe<STRAPI_PROCESS>;
  readonly node: STRAPI_PROCESS;
  readonly previous: Maybe<STRAPI_PROCESS>;
};

type STRAPI_PROCESSFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly markdown: InputMaybe<STRAPI_PROCESSMarkdownFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_PROCESSFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly markdown: InputMaybe<STRAPI_PROCESSMarkdownFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_PROCESSFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PROCESSFilterInput>;
};

type STRAPI_PROCESSGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROCESSEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROCESSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROCESS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROCESSGroupConnection_distinctArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSGroupConnection_groupArgs = {
  field: STRAPI_PROCESSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROCESSGroupConnection_maxArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSGroupConnection_minArgs = {
  field: STRAPI_PROCESSFieldSelector;
};


type STRAPI_PROCESSGroupConnection_sumArgs = {
  field: STRAPI_PROCESSFieldSelector;
};

type STRAPI_PROCESSMarkdown = {
  readonly data: Maybe<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
};

type STRAPI_PROCESSMarkdownFieldSelector = {
  readonly data: InputMaybe<STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector>;
};

type STRAPI_PROCESSMarkdownFilterInput = {
  readonly data: InputMaybe<STRAPI_PROCESS_MARKDOWN_TEXTNODEFilterInput>;
};

type STRAPI_PROCESSMarkdownSortInput = {
  readonly data: InputMaybe<STRAPI_PROCESS_MARKDOWN_TEXTNODESortInput>;
};

type STRAPI_PROCESSSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly markdown: InputMaybe<STRAPI_PROCESSMarkdownSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly markdown: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection_groupArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection_maxArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection_minArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEConnection_sumArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
  readonly node: STRAPI_PROCESS_MARKDOWN_TEXTNODE;
  readonly previous: Maybe<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly markdown: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly markdown: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROCESS_MARKDOWN_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};


type STRAPI_PROCESS_MARKDOWN_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_PROCESS_MARKDOWN_TEXTNODEFieldSelector;
};

type STRAPI_PROCESS_MARKDOWN_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly markdown: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_PROJECT = Node & {
  readonly areas: Maybe<ReadonlyArray<Maybe<STRAPI_AREA>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly darkImage: Maybe<STRAPI__MEDIA>;
  readonly description: Maybe<STRAPI_PROJECTDescription>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly gallery: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly hero: Maybe<Scalars['Boolean']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly ogimage: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly projected: Maybe<STRAPI_SHOWCASE>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly teams: Maybe<ReadonlyArray<Maybe<STRAPI_TEAM>>>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly vendors: Maybe<ReadonlyArray<Maybe<STRAPI_VENDOR>>>;
  readonly venue: Maybe<STRAPI_VENUE>;
};


type STRAPI_PROJECT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECT_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_PROJECT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_PROJECTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECTEdge>;
  readonly group: ReadonlyArray<STRAPI_PROJECTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECTConnection_distinctArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTConnection_groupArgs = {
  field: STRAPI_PROJECTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECTConnection_maxArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTConnection_minArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTConnection_sumArgs = {
  field: STRAPI_PROJECTFieldSelector;
};

type STRAPI_PROJECTDescription = {
  readonly data: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
};

type STRAPI_PROJECTDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_PROJECTDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_PROJECTDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_PROJECTEdge = {
  readonly next: Maybe<STRAPI_PROJECT>;
  readonly node: STRAPI_PROJECT;
  readonly previous: Maybe<STRAPI_PROJECT>;
};

type STRAPI_PROJECTFieldSelector = {
  readonly areas: InputMaybe<STRAPI_AREAFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly darkImage: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly description: InputMaybe<STRAPI_PROJECTDescriptionFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly gallery: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly hero: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly ogimage: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly projected: InputMaybe<STRAPI_SHOWCASEFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly teams: InputMaybe<STRAPI_TEAMFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly vendors: InputMaybe<STRAPI_VENDORFieldSelector>;
  readonly venue: InputMaybe<STRAPI_VENUEFieldSelector>;
};

type STRAPI_PROJECTFilterInput = {
  readonly areas: InputMaybe<STRAPI_AREAFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly darkImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly description: InputMaybe<STRAPI_PROJECTDescriptionFilterInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly gallery: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly hero: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly ogimage: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly projected: InputMaybe<STRAPI_SHOWCASEFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly teams: InputMaybe<STRAPI_TEAMFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly vendors: InputMaybe<STRAPI_VENDORFilterListInput>;
  readonly venue: InputMaybe<STRAPI_VENUEFilterInput>;
};

type STRAPI_PROJECTFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_PROJECTFilterInput>;
};

type STRAPI_PROJECTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROJECTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECTGroupConnection_distinctArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTGroupConnection_groupArgs = {
  field: STRAPI_PROJECTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECTGroupConnection_maxArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTGroupConnection_minArgs = {
  field: STRAPI_PROJECTFieldSelector;
};


type STRAPI_PROJECTGroupConnection_sumArgs = {
  field: STRAPI_PROJECTFieldSelector;
};

type STRAPI_PROJECTSortInput = {
  readonly areas: InputMaybe<STRAPI_AREASortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly darkImage: InputMaybe<STRAPI__MEDIASortInput>;
  readonly description: InputMaybe<STRAPI_PROJECTDescriptionSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly gallery: InputMaybe<STRAPI__MEDIASortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly hero: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly ogimage: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly projected: InputMaybe<STRAPI_SHOWCASESortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly teams: InputMaybe<STRAPI_TEAMSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly vendors: InputMaybe<STRAPI_VENDORSortInput>;
  readonly venue: InputMaybe<STRAPI_VENUESortInput>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_PROJECT_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_PROJECT_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_PROJECT_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_PROJECT_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_PROJECT_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_QUALITY = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_QUALITYDescription>;
  readonly eyebrow: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_QUALITY_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_QUALITY_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_QUALITY_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_QUALITYConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_QUALITYEdge>;
  readonly group: ReadonlyArray<STRAPI_QUALITYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_QUALITY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_QUALITYConnection_distinctArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYConnection_groupArgs = {
  field: STRAPI_QUALITYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_QUALITYConnection_maxArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYConnection_minArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYConnection_sumArgs = {
  field: STRAPI_QUALITYFieldSelector;
};

type STRAPI_QUALITYDescription = {
  readonly data: Maybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
};

type STRAPI_QUALITYDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_QUALITYDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_QUALITYDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_QUALITYEdge = {
  readonly next: Maybe<STRAPI_QUALITY>;
  readonly node: STRAPI_QUALITY;
  readonly previous: Maybe<STRAPI_QUALITY>;
};

type STRAPI_QUALITYFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_QUALITYDescriptionFieldSelector>;
  readonly eyebrow: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_QUALITYFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_QUALITYDescriptionFilterInput>;
  readonly eyebrow: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_QUALITYGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_QUALITYEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_QUALITYGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_QUALITY>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_QUALITYGroupConnection_distinctArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYGroupConnection_groupArgs = {
  field: STRAPI_QUALITYFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_QUALITYGroupConnection_maxArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYGroupConnection_minArgs = {
  field: STRAPI_QUALITYFieldSelector;
};


type STRAPI_QUALITYGroupConnection_sumArgs = {
  field: STRAPI_QUALITYFieldSelector;
};

type STRAPI_QUALITYSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_QUALITYDescriptionSortInput>;
  readonly eyebrow: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_QUALITY_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_QUALITY_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_QUALITY_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_QUALITY_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_QUALITY_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_SEASON = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly wedding: Maybe<Scalars['Boolean']>;
};


type STRAPI_SEASON_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SEASON_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SEASON_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SEASONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SEASONEdge>;
  readonly group: ReadonlyArray<STRAPI_SEASONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SEASON>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SEASONConnection_distinctArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONConnection_groupArgs = {
  field: STRAPI_SEASONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SEASONConnection_maxArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONConnection_minArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONConnection_sumArgs = {
  field: STRAPI_SEASONFieldSelector;
};

type STRAPI_SEASONEdge = {
  readonly next: Maybe<STRAPI_SEASON>;
  readonly node: STRAPI_SEASON;
  readonly previous: Maybe<STRAPI_SEASON>;
};

type STRAPI_SEASONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly wedding: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SEASONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly wedding: InputMaybe<BooleanQueryOperatorInput>;
};

type STRAPI_SEASONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SEASONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SEASONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SEASON>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SEASONGroupConnection_distinctArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONGroupConnection_groupArgs = {
  field: STRAPI_SEASONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SEASONGroupConnection_maxArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONGroupConnection_minArgs = {
  field: STRAPI_SEASONFieldSelector;
};


type STRAPI_SEASONGroupConnection_sumArgs = {
  field: STRAPI_SEASONFieldSelector;
};

type STRAPI_SEASONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly wedding: InputMaybe<SortOrderEnum>;
};

type STRAPI_SERVICE = Node & {
  readonly affiliation: Maybe<STRAPI_AFFILIATION>;
  readonly after_the_triptych: Maybe<STRAPI_SERVICEAfter_the_triptych>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_SERVICEDescription>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly featured_lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly hero_dark: Maybe<STRAPI__MEDIA>;
  readonly hero_light: Maybe<STRAPI__MEDIA>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly light_groups: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT_GROUP>>>;
  readonly lights: Maybe<ReadonlyArray<Maybe<STRAPI_LIGHT>>>;
  readonly lookbook: Maybe<STRAPI_LOOKBOOK>;
  readonly name: Maybe<Scalars['String']>;
  readonly ogimage: Maybe<STRAPI__MEDIA>;
  readonly parent: Maybe<Node>;
  readonly processes: Maybe<ReadonlyArray<Maybe<STRAPI_PROCESS>>>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly showcaseDescription: Maybe<STRAPI_SERVICEShowcaseDescription>;
  readonly showcases: Maybe<ReadonlyArray<Maybe<STRAPI_SHOWCASE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly testimonials: Maybe<ReadonlyArray<Maybe<STRAPI_TESTIMONIAL>>>;
  readonly triptych: Maybe<ReadonlyArray<Maybe<STRAPI__MEDIA>>>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly vendors: Maybe<ReadonlyArray<Maybe<STRAPI_VENDOR>>>;
  readonly venues: Maybe<ReadonlyArray<Maybe<STRAPI_VENUE>>>;
  readonly videoMux: Maybe<Scalars['String']>;
};


type STRAPI_SERVICE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SERVICE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SERVICE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SERVICEAfter_the_triptych = {
  readonly data: Maybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
};

type STRAPI_SERVICEAfter_the_triptychFieldSelector = {
  readonly data: InputMaybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector>;
};

type STRAPI_SERVICEAfter_the_triptychFilterInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFilterInput>;
};

type STRAPI_SERVICEAfter_the_triptychSortInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODESortInput>;
};

type STRAPI_SERVICEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICEEdge>;
  readonly group: ReadonlyArray<STRAPI_SERVICEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICEConnection_distinctArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEConnection_groupArgs = {
  field: STRAPI_SERVICEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICEConnection_maxArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEConnection_minArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEConnection_sumArgs = {
  field: STRAPI_SERVICEFieldSelector;
};

type STRAPI_SERVICEDescription = {
  readonly data: Maybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_SERVICEDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_SERVICEDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_SERVICEDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_SERVICEEdge = {
  readonly next: Maybe<STRAPI_SERVICE>;
  readonly node: STRAPI_SERVICE;
  readonly previous: Maybe<STRAPI_SERVICE>;
};

type STRAPI_SERVICEFieldSelector = {
  readonly affiliation: InputMaybe<STRAPI_AFFILIATIONFieldSelector>;
  readonly after_the_triptych: InputMaybe<STRAPI_SERVICEAfter_the_triptychFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_SERVICEDescriptionFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly featured_lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly hero_dark: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly hero_light: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPFieldSelector>;
  readonly lights: InputMaybe<STRAPI_LIGHTFieldSelector>;
  readonly lookbook: InputMaybe<STRAPI_LOOKBOOKFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly ogimage: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly processes: InputMaybe<STRAPI_PROCESSFieldSelector>;
  readonly projects: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly showcaseDescription: InputMaybe<STRAPI_SERVICEShowcaseDescriptionFieldSelector>;
  readonly showcases: InputMaybe<STRAPI_SHOWCASEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFieldSelector>;
  readonly triptych: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly vendors: InputMaybe<STRAPI_VENDORFieldSelector>;
  readonly venues: InputMaybe<STRAPI_VENUEFieldSelector>;
  readonly videoMux: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SERVICEFilterInput = {
  readonly affiliation: InputMaybe<STRAPI_AFFILIATIONFilterInput>;
  readonly after_the_triptych: InputMaybe<STRAPI_SERVICEAfter_the_triptychFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_SERVICEDescriptionFilterInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly featured_lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly hero_dark: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly hero_light: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPFilterListInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTFilterListInput>;
  readonly lookbook: InputMaybe<STRAPI_LOOKBOOKFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly ogimage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly processes: InputMaybe<STRAPI_PROCESSFilterListInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly showcaseDescription: InputMaybe<STRAPI_SERVICEShowcaseDescriptionFilterInput>;
  readonly showcases: InputMaybe<STRAPI_SHOWCASEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  readonly triptych: InputMaybe<STRAPI__MEDIAFilterListInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly vendors: InputMaybe<STRAPI_VENDORFilterListInput>;
  readonly venues: InputMaybe<STRAPI_VENUEFilterListInput>;
  readonly videoMux: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SERVICEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_SERVICEFilterInput>;
};

type STRAPI_SERVICEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SERVICEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICEGroupConnection_distinctArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEGroupConnection_groupArgs = {
  field: STRAPI_SERVICEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICEGroupConnection_maxArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEGroupConnection_minArgs = {
  field: STRAPI_SERVICEFieldSelector;
};


type STRAPI_SERVICEGroupConnection_sumArgs = {
  field: STRAPI_SERVICEFieldSelector;
};

type STRAPI_SERVICEShowcaseDescription = {
  readonly data: Maybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
};

type STRAPI_SERVICEShowcaseDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_SERVICEShowcaseDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_SERVICEShowcaseDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_SERVICESortInput = {
  readonly affiliation: InputMaybe<STRAPI_AFFILIATIONSortInput>;
  readonly after_the_triptych: InputMaybe<STRAPI_SERVICEAfter_the_triptychSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_SERVICEDescriptionSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly featured_lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly hero_dark: InputMaybe<STRAPI__MEDIASortInput>;
  readonly hero_light: InputMaybe<STRAPI__MEDIASortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly light_groups: InputMaybe<STRAPI_LIGHT_GROUPSortInput>;
  readonly lights: InputMaybe<STRAPI_LIGHTSortInput>;
  readonly lookbook: InputMaybe<STRAPI_LOOKBOOKSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly ogimage: InputMaybe<STRAPI__MEDIASortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly processes: InputMaybe<STRAPI_PROCESSSortInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly showcaseDescription: InputMaybe<STRAPI_SERVICEShowcaseDescriptionSortInput>;
  readonly showcases: InputMaybe<STRAPI_SHOWCASESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALSortInput>;
  readonly triptych: InputMaybe<STRAPI__MEDIASortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly vendors: InputMaybe<STRAPI_VENDORSortInput>;
  readonly venues: InputMaybe<STRAPI_VENUESortInput>;
  readonly videoMux: InputMaybe<SortOrderEnum>;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE = Node & {
  readonly after_the_triptych: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection_groupArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection_maxArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection_minArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEConnection_sumArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
  readonly node: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE;
  readonly previous: Maybe<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector = {
  readonly after_the_triptych: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFilterInput = {
  readonly after_the_triptych: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_AFTER_THE_TRIPTYCH_TEXTNODESortInput = {
  readonly after_the_triptych: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_SERVICE_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_SERVICE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly showcaseDescription: Maybe<Scalars['String']>;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly showcaseDescription: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly showcaseDescription: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SERVICE_SHOWCASEDESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly showcaseDescription: InputMaybe<SortOrderEnum>;
};

type STRAPI_SHOWCASE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_SHOWCASEDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly price: Maybe<Scalars['String']>;
  readonly project: Maybe<STRAPI_PROJECT>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly roofline: Maybe<Scalars['String']>;
  readonly service: Maybe<STRAPI_SERVICE>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly tier: Maybe<Scalars['String']>;
  readonly tree: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_SHOWCASE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SHOWCASE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SHOWCASE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SHOWCASEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOWCASEEdge>;
  readonly group: ReadonlyArray<STRAPI_SHOWCASEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOWCASE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOWCASEConnection_distinctArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEConnection_groupArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOWCASEConnection_maxArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEConnection_minArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEConnection_sumArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};

type STRAPI_SHOWCASEDescription = {
  readonly data: Maybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_SHOWCASEDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_SHOWCASEDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_SHOWCASEDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_SHOWCASEEdge = {
  readonly next: Maybe<STRAPI_SHOWCASE>;
  readonly node: STRAPI_SHOWCASE;
  readonly previous: Maybe<STRAPI_SHOWCASE>;
};

type STRAPI_SHOWCASEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_SHOWCASEDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly price: InputMaybe<FieldSelectorEnum>;
  readonly project: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly roofline: InputMaybe<FieldSelectorEnum>;
  readonly service: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly tier: InputMaybe<FieldSelectorEnum>;
  readonly tree: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SHOWCASEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_SHOWCASEDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly price: InputMaybe<StringQueryOperatorInput>;
  readonly project: InputMaybe<STRAPI_PROJECTFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly roofline: InputMaybe<StringQueryOperatorInput>;
  readonly service: InputMaybe<STRAPI_SERVICEFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly tier: InputMaybe<StringQueryOperatorInput>;
  readonly tree: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_SHOWCASEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_SHOWCASEFilterInput>;
};

type STRAPI_SHOWCASEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOWCASEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SHOWCASEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOWCASE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOWCASEGroupConnection_distinctArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEGroupConnection_groupArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOWCASEGroupConnection_maxArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEGroupConnection_minArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};


type STRAPI_SHOWCASEGroupConnection_sumArgs = {
  field: STRAPI_SHOWCASEFieldSelector;
};

type STRAPI_SHOWCASESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_SHOWCASEDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly price: InputMaybe<SortOrderEnum>;
  readonly project: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly roofline: InputMaybe<SortOrderEnum>;
  readonly service: InputMaybe<STRAPI_SERVICESortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly tier: InputMaybe<SortOrderEnum>;
  readonly tree: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOWCASE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_SHOWCASE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_SHOWCASE_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_TEAM = Node & {
  readonly avatar: Maybe<STRAPI__MEDIA>;
  readonly bio: Maybe<STRAPI_TEAMBio>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly plan: Maybe<STRAPI_PLAN>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TEAM_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TEAM_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_TEAM_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TEAM_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TEAMBio = {
  readonly data: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
};

type STRAPI_TEAMBioFieldSelector = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFieldSelector>;
};

type STRAPI_TEAMBioFilterInput = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFilterInput>;
};

type STRAPI_TEAMBioSortInput = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODESortInput>;
};

type STRAPI_TEAMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAMEdge>;
  readonly group: ReadonlyArray<STRAPI_TEAMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAMConnection_distinctArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_groupArgs = {
  field: STRAPI_TEAMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAMConnection_maxArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_minArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_sumArgs = {
  field: STRAPI_TEAMFieldSelector;
};

type STRAPI_TEAMEdge = {
  readonly next: Maybe<STRAPI_TEAM>;
  readonly node: STRAPI_TEAM;
  readonly previous: Maybe<STRAPI_TEAM>;
};

type STRAPI_TEAMFieldSelector = {
  readonly avatar: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly bio: InputMaybe<STRAPI_TEAMBioFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly plan: InputMaybe<STRAPI_PLANFieldSelector>;
  readonly projects: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TEAMFilterInput = {
  readonly avatar: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly bio: InputMaybe<STRAPI_TEAMBioFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly plan: InputMaybe<STRAPI_PLANFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TEAMFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TEAMFilterInput>;
};

type STRAPI_TEAMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TEAMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAMGroupConnection_distinctArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_groupArgs = {
  field: STRAPI_TEAMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAMGroupConnection_maxArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_minArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_sumArgs = {
  field: STRAPI_TEAMFieldSelector;
};

type STRAPI_TEAMSortInput = {
  readonly avatar: InputMaybe<STRAPI__MEDIASortInput>;
  readonly bio: InputMaybe<STRAPI_TEAMBioSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly plan: InputMaybe<STRAPI_PLANSortInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TEAM_BIO_TEXTNODE = Node & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_TEAM_BIO_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_groupArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_maxArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_minArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_sumArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};

type STRAPI_TEAM_BIO_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly node: STRAPI_TEAM_BIO_TEXTNODE;
  readonly previous: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
};

type STRAPI_TEAM_BIO_TEXTNODEFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_TEAM_BIO_TEXTNODEFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_TEAM_BIO_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};

type STRAPI_TEAM_BIO_TEXTNODESortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_TESTIMONIAL = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly customer: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly platform: Maybe<Scalars['String']>;
  readonly position: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly review: Maybe<Scalars['String']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly stars: Maybe<Scalars['Int']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly vendor: Maybe<STRAPI_VENDOR>;
  readonly venue: Maybe<STRAPI_VENUE>;
};


type STRAPI_TESTIMONIAL_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TESTIMONIAL_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_TESTIMONIAL_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TESTIMONIAL_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TESTIMONIALConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TESTIMONIALEdge>;
  readonly group: ReadonlyArray<STRAPI_TESTIMONIALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TESTIMONIAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TESTIMONIALConnection_distinctArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_groupArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TESTIMONIALConnection_maxArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_minArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_sumArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};

type STRAPI_TESTIMONIALEdge = {
  readonly next: Maybe<STRAPI_TESTIMONIAL>;
  readonly node: STRAPI_TESTIMONIAL;
  readonly previous: Maybe<STRAPI_TESTIMONIAL>;
};

type STRAPI_TESTIMONIALFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly customer: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly platform: InputMaybe<FieldSelectorEnum>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly review: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly stars: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly vendor: InputMaybe<STRAPI_VENDORFieldSelector>;
  readonly venue: InputMaybe<STRAPI_VENUEFieldSelector>;
};

type STRAPI_TESTIMONIALFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly customer: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly platform: InputMaybe<StringQueryOperatorInput>;
  readonly position: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly review: InputMaybe<StringQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly stars: InputMaybe<IntQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly vendor: InputMaybe<STRAPI_VENDORFilterInput>;
  readonly venue: InputMaybe<STRAPI_VENUEFilterInput>;
};

type STRAPI_TESTIMONIALFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TESTIMONIALFilterInput>;
};

type STRAPI_TESTIMONIALGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TESTIMONIALEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TESTIMONIALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TESTIMONIAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TESTIMONIALGroupConnection_distinctArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_groupArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TESTIMONIALGroupConnection_maxArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_minArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_sumArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};

type STRAPI_TESTIMONIALSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly customer: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly platform: InputMaybe<SortOrderEnum>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly review: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly stars: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly vendor: InputMaybe<STRAPI_VENDORSortInput>;
  readonly venue: InputMaybe<STRAPI_VENUESortInput>;
};

type STRAPI_TOPBAR = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TOPBAR_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOPBAR_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOPBAR_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TOPBARConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPBAREdge>;
  readonly group: ReadonlyArray<STRAPI_TOPBARGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPBAR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPBARConnection_distinctArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARConnection_groupArgs = {
  field: STRAPI_TOPBARFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPBARConnection_maxArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARConnection_minArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARConnection_sumArgs = {
  field: STRAPI_TOPBARFieldSelector;
};

type STRAPI_TOPBAREdge = {
  readonly next: Maybe<STRAPI_TOPBAR>;
  readonly node: STRAPI_TOPBAR;
  readonly previous: Maybe<STRAPI_TOPBAR>;
};

type STRAPI_TOPBARFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TOPBARFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TOPBARGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOPBAREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TOPBARGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOPBAR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOPBARGroupConnection_distinctArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARGroupConnection_groupArgs = {
  field: STRAPI_TOPBARFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOPBARGroupConnection_maxArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARGroupConnection_minArgs = {
  field: STRAPI_TOPBARFieldSelector;
};


type STRAPI_TOPBARGroupConnection_sumArgs = {
  field: STRAPI_TOPBARFieldSelector;
};

type STRAPI_TOPBARSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_VENDOR = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly instagram: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pinterest: Maybe<Scalars['String']>;
  readonly profile: Maybe<STRAPI__MEDIA>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly service: Maybe<Scalars['String']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly testimonials: Maybe<ReadonlyArray<Maybe<STRAPI_TESTIMONIAL>>>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly website: Maybe<Scalars['String']>;
};


type STRAPI_VENDOR_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_VENDOR_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_VENDOR_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_VENDORConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENDOREdge>;
  readonly group: ReadonlyArray<STRAPI_VENDORGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENDOR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENDORConnection_distinctArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORConnection_groupArgs = {
  field: STRAPI_VENDORFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENDORConnection_maxArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORConnection_minArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORConnection_sumArgs = {
  field: STRAPI_VENDORFieldSelector;
};

type STRAPI_VENDOREdge = {
  readonly next: Maybe<STRAPI_VENDOR>;
  readonly node: STRAPI_VENDOR;
  readonly previous: Maybe<STRAPI_VENDOR>;
};

type STRAPI_VENDORFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly instagram: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pinterest: InputMaybe<FieldSelectorEnum>;
  readonly profile: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly projects: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly service: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_VENDORFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly instagram: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pinterest: InputMaybe<StringQueryOperatorInput>;
  readonly profile: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly service: InputMaybe<StringQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_VENDORFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_VENDORFilterInput>;
};

type STRAPI_VENDORGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENDOREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_VENDORGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENDOR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENDORGroupConnection_distinctArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORGroupConnection_groupArgs = {
  field: STRAPI_VENDORFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENDORGroupConnection_maxArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORGroupConnection_minArgs = {
  field: STRAPI_VENDORFieldSelector;
};


type STRAPI_VENDORGroupConnection_sumArgs = {
  field: STRAPI_VENDORFieldSelector;
};

type STRAPI_VENDORSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly instagram: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pinterest: InputMaybe<SortOrderEnum>;
  readonly profile: InputMaybe<STRAPI__MEDIASortInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly service: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type STRAPI_VENUE = Node & {
  readonly address: Maybe<STRAPI_VENUEAddress>;
  readonly area: Maybe<STRAPI_AREA>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly phone: Maybe<Scalars['Float']>;
  readonly projects: Maybe<ReadonlyArray<Maybe<STRAPI_PROJECT>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly services: Maybe<ReadonlyArray<Maybe<STRAPI_SERVICE>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly testimonials: Maybe<ReadonlyArray<Maybe<STRAPI_TESTIMONIAL>>>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly uses: Maybe<Scalars['String']>;
  readonly venueImage: Maybe<STRAPI__MEDIA>;
  readonly website: Maybe<Scalars['String']>;
};


type STRAPI_VENUE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_VENUE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_VENUE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_VENUEAddress = {
  readonly data: Maybe<STRAPI_VENUE_ADDRESS_TEXTNODE>;
};

type STRAPI_VENUEAddressFieldSelector = {
  readonly data: InputMaybe<STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector>;
};

type STRAPI_VENUEAddressFilterInput = {
  readonly data: InputMaybe<STRAPI_VENUE_ADDRESS_TEXTNODEFilterInput>;
};

type STRAPI_VENUEAddressSortInput = {
  readonly data: InputMaybe<STRAPI_VENUE_ADDRESS_TEXTNODESortInput>;
};

type STRAPI_VENUEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENUEEdge>;
  readonly group: ReadonlyArray<STRAPI_VENUEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENUE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENUEConnection_distinctArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEConnection_groupArgs = {
  field: STRAPI_VENUEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENUEConnection_maxArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEConnection_minArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEConnection_sumArgs = {
  field: STRAPI_VENUEFieldSelector;
};

type STRAPI_VENUEEdge = {
  readonly next: Maybe<STRAPI_VENUE>;
  readonly node: STRAPI_VENUE;
  readonly previous: Maybe<STRAPI_VENUE>;
};

type STRAPI_VENUEFieldSelector = {
  readonly address: InputMaybe<STRAPI_VENUEAddressFieldSelector>;
  readonly area: InputMaybe<STRAPI_AREAFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
  readonly projects: InputMaybe<STRAPI_PROJECTFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly services: InputMaybe<STRAPI_SERVICEFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly uses: InputMaybe<FieldSelectorEnum>;
  readonly venueImage: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly website: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_VENUEFilterInput = {
  readonly address: InputMaybe<STRAPI_VENUEAddressFilterInput>;
  readonly area: InputMaybe<STRAPI_AREAFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly phone: InputMaybe<FloatQueryOperatorInput>;
  readonly projects: InputMaybe<STRAPI_PROJECTFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly services: InputMaybe<STRAPI_SERVICEFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly uses: InputMaybe<StringQueryOperatorInput>;
  readonly venueImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly website: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_VENUEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_VENUEFilterInput>;
};

type STRAPI_VENUEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENUEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_VENUEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENUE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENUEGroupConnection_distinctArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEGroupConnection_groupArgs = {
  field: STRAPI_VENUEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENUEGroupConnection_maxArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEGroupConnection_minArgs = {
  field: STRAPI_VENUEFieldSelector;
};


type STRAPI_VENUEGroupConnection_sumArgs = {
  field: STRAPI_VENUEFieldSelector;
};

type STRAPI_VENUESortInput = {
  readonly address: InputMaybe<STRAPI_VENUEAddressSortInput>;
  readonly area: InputMaybe<STRAPI_AREASortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly phone: InputMaybe<SortOrderEnum>;
  readonly projects: InputMaybe<STRAPI_PROJECTSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly services: InputMaybe<STRAPI_SERVICESortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly uses: InputMaybe<SortOrderEnum>;
  readonly venueImage: InputMaybe<STRAPI__MEDIASortInput>;
  readonly website: InputMaybe<SortOrderEnum>;
};

type STRAPI_VENUE_ADDRESS_TEXTNODE = Node & {
  readonly address: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_VENUE_ADDRESS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENUE_ADDRESS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEConnection_groupArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEConnection_maxArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEConnection_minArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEConnection_sumArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};

type STRAPI_VENUE_ADDRESS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_VENUE_ADDRESS_TEXTNODE>;
  readonly node: STRAPI_VENUE_ADDRESS_TEXTNODE;
  readonly previous: Maybe<STRAPI_VENUE_ADDRESS_TEXTNODE>;
};

type STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector = {
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_VENUE_ADDRESS_TEXTNODEFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_VENUE_ADDRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_VENUE_ADDRESS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_VENUE_ADDRESS_TEXTNODEFieldSelector;
};

type STRAPI_VENUE_ADDRESS_TEXTNODESortInput = {
  readonly address: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI__MEDIA = Node & {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldSelector = {
  readonly alternativeText: InputMaybe<FieldSelectorEnum>;
  readonly caption: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFieldSelector>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__MEDIAFilterInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFieldSelector = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFieldSelector>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFieldSelector>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFieldSelector>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFieldSelector>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly sizeInBytes: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sizeInBytes: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly sizeInBytes: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsLargeSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sizeInBytes: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly sizeInBytes: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sizeInBytes: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly sizeInBytes: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMediumSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sizeInBytes: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly sizeInBytes: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sizeInBytes: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly sizeInBytes: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmallSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sizeInBytes: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSortInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeSortInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumSortInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallSortInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailSortInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly sizeInBytes: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sizeInBytes: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly sizeInBytes: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnailSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sizeInBytes: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIASortInput = {
  readonly alternativeText: InputMaybe<SortOrderEnum>;
  readonly caption: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsSortInput>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AffiliationsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AffiliationsQueryQuery = { readonly allStrapiAffiliation: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly link: string | null, readonly logo: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type AreaCatchAllQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AreaCatchAllQueryQuery = { readonly allStrapiArea: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null }> } };

type areaLinkFragment = { readonly id: string, readonly name: string | null, readonly state: string | null, readonly slug: string | null };

type AreasQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AreasQueryQuery = { readonly allStrapiArea: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly state: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly venues: ReadonlyArray<{ readonly id: string } | null> | null, readonly areas: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly venues: ReadonlyArray<{ readonly id: string } | null> | null } | null> | null }> } };

type AreasTemplateQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type AreasTemplateQuery = { readonly strapiArea: { readonly id: string, readonly name: string | null, readonly tagline: string | null, readonly state: string | null, readonly slug: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly areas: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly venues: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null> | null, readonly venues: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null, readonly strapiAbout: { readonly businessName: string | null } | null };

type ChristmasLightsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ChristmasLightsQueryQuery = { readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly light_groups: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null, readonly services: ReadonlyArray<{ readonly slug: string | null, readonly id: string, readonly name: string | null } | null> | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type FooterQueryQueryVariables = Exact<{ [key: string]: never; }>;


type FooterQueryQuery = { readonly allStrapiTeam: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly avatar: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiAbout: { readonly businessName: string | null, readonly email: string | null, readonly telephone: string | null } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type homeGalleryFragmentFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly hero_light: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly hero_dark: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type IndexQueryQueryVariables = Exact<{ [key: string]: never; }>;


type IndexQueryQuery = { readonly strapiAbout: { readonly slogan: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null } | null, readonly allStrapiService: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly hero_light: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly hero_dark: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly allStrapiTestimonial: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly customer: string | null, readonly platform: string | null, readonly excerpt: string | null, readonly createdAt: string | null, readonly stars: number | null, readonly title: string | null, readonly position: string | null }> }, readonly allStrapiQuality: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly eyebrow: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null }> } };

type lightCardFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type LightCatchAllQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LightCatchAllQueryQuery = { readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type lightGroupFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null, readonly services: ReadonlyArray<{ readonly slug: string | null, readonly id: string, readonly name: string | null } | null> | null };

type LightGroupQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type LightGroupQueryQuery = { readonly strapiLightGroup: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null, readonly lights: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null, readonly services: ReadonlyArray<{ readonly slug: string | null, readonly id: string, readonly name: string | null } | null> | null } | null, readonly allStrapiLightGroup: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null }> } };

type LightQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type LightQueryQuery = { readonly strapiLight: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly description: string | null, readonly alias: string | null, readonly services: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null } | null> | null, readonly light_groups: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly lights: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly detail: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null, readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type LightsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LightsQueryQuery = { readonly wedding: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly light_groups: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly xmas: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly light_groups: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly all: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly services: ReadonlyArray<{ readonly slug: string | null } | null> | null, readonly light_groups: ReadonlyArray<{ readonly slug: string | null } | null> | null }> }, readonly strapiSeason: { readonly wedding: boolean | null } | null, readonly allStrapiService: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null }> } };

type LookbookPosterQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LookbookPosterQueryQuery = { readonly strapiLookbook: { readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type LookbookQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LookbookQueryQuery = { readonly allStrapiLookbook: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly spread: number | null, readonly order: number | null, readonly flex: number | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly lights: ReadonlyArray<{ readonly slug: string | null, readonly name: string | null } | null> | null }> } };

type processFragment = { readonly id: string, readonly name: string | null, readonly markdown: { readonly data: { readonly markdown: string | null } | null } | null };

type ProcessQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ProcessQueryQuery = { readonly holiday: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly markdown: { readonly data: { readonly markdown: string | null } | null } | null }> }, readonly wedding: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly markdown: { readonly data: { readonly markdown: string | null } | null } | null }> } };

type projectCardFragment = { readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type ProjectQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type ProjectQueryQuery = { readonly strapiProject: { readonly id: string, readonly title: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly ogimage: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly gallery: ReadonlyArray<{ readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly lights: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null, readonly areas: ReadonlyArray<{ readonly name: string | null, readonly state: string | null, readonly slug: string | null } | null> | null, readonly teams: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null } | null> | null, readonly vendors: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly service: string | null } | null> | null, readonly venue: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly area: { readonly id: string, readonly name: string | null, readonly state: string | null, readonly slug: string | null } | null } | null, readonly services: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null } | null> | null } | null, readonly triptych: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly additional: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null }> }, readonly allStrapiProject: { readonly nodes: ReadonlyArray<{ readonly title: string | null, readonly id: string, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type ProjectsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ProjectsQueryQuery = { readonly allStrapiService: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly projects: ReadonlyArray<{ readonly updatedAt: string | null, readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null }> } };

type SearchQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SearchQueryQuery = { readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type SEOQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SEOQueryQuery = { readonly strapiAbout: { readonly businessName: string | null, readonly url: string | null, readonly slogan: string | null, readonly defaultImage: string | null, readonly defaultImageAlt: string | null, readonly openingHours: string | null, readonly telephone: string | null, readonly email: string | null, readonly paymentAccepted: string | null, readonly alternateName: string | null, readonly geoLatitude: number | null, readonly geoLongitude: number | null, readonly geoRadius: number | null, readonly addressLocality: string | null, readonly addressRegion: string | null, readonly postalCode: string | null } | null, readonly strapiTopbar: { readonly title: string | null, readonly link: string | null } | null };

type ServiceLightsTemplateQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type ServiceLightsTemplateQuery = { readonly strapiService: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null } | null, readonly allStrapiService: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null }> }, readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly light_groups: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly allStrapiLightGroup: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null }> } };

type ServiceTemplateQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type ServiceTemplateQuery = { readonly strapiService: { readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly videoMux: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly after_the_triptych: { readonly data: { readonly after_the_triptych: string | null } | null } | null, readonly projects: ReadonlyArray<{ readonly updatedAt: string | null, readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null, readonly triptych: ReadonlyArray<{ readonly id: string, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly featured_lights: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null, readonly allStrapiProcess: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly markdown: { readonly data: { readonly markdown: string | null } | null } | null }> }, readonly allStrapiVenue: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly allStrapiVendor: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly service: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type showcaseFragment = { readonly id: string, readonly roofline: string | null, readonly price: string | null, readonly tree: string | null, readonly tier: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly project: { readonly id: string, readonly slug: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type ShowcaseQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ShowcaseQueryQuery = { readonly allStrapiShowcase: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly roofline: string | null, readonly price: string | null, readonly tree: string | null, readonly tier: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly project: { readonly id: string, readonly slug: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null }> }, readonly strapiService: { readonly showcaseDescription: { readonly data: { readonly showcaseDescription: string | null } | null } | null } | null, readonly allStrapiLight: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly byline: string | null, readonly light_groups: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly weddingOrder: number | null, readonly xmasOrder: number | null, readonly services: ReadonlyArray<{ readonly slug: string | null, readonly id: string, readonly name: string | null } | null> | null } | null> | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type strapiImageGrabWorkQueryVariables = Exact<{ [key: string]: never; }>;


type strapiImageGrabWorkQuery = { readonly strapiImageGrab: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type teamFragmentFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly bio: { readonly data: { readonly bio: string | null } | null } | null, readonly avatar: { readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type TeamPageQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TeamPageQueryQuery = { readonly allStrapiTeam: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly bio: { readonly data: { readonly bio: string | null } | null } | null, readonly avatar: { readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type TeamQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type TeamQueryQuery = { readonly strapiTeam: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null, readonly bio: { readonly data: { readonly bio: string | null } | null } | null, readonly avatar: { readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly strapiAbout: { readonly businessName: string | null } | null };

type TestimonialQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type TestimonialQueryQuery = { readonly strapiTestimonial: { readonly id: string, readonly customer: string | null, readonly slug: string | null, readonly stars: number | null, readonly review: string | null, readonly title: string | null, readonly createdAt: string | null } | null };

type TestimonialsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TestimonialsQueryQuery = { readonly allStrapiTestimonial: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly customer: string | null, readonly stars: number | null, readonly review: string | null, readonly title: string | null, readonly slug: string | null, readonly link: string | null, readonly position: string | null, readonly platform: string | null, readonly vendor: { readonly name: string | null, readonly slug: string | null } | null }> } };

type TopBarQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TopBarQueryQuery = { readonly strapiTopbar: { readonly title: string | null, readonly link: string | null } | null };

type vendorCardFragment = { readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly service: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type VendorCatchAllQueryQueryVariables = Exact<{ [key: string]: never; }>;


type VendorCatchAllQueryQuery = { readonly allStrapiVendor: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly service: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type VendorServiceTemplateQueryVariables = Exact<{
  service: Scalars['String'];
}>;


type VendorServiceTemplateQuery = { readonly allStrapiVendor: { readonly distinct: ReadonlyArray<string>, readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly service: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type VendorsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type VendorsQueryQuery = { readonly allStrapiVendor: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly service: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type VendorTemplateQueryVariables = Exact<{
  slug: Scalars['String'];
  service: Scalars['String'];
}>;


type VendorTemplateQuery = { readonly strapiVendor: { readonly id: string, readonly name: string | null, readonly description: string | null, readonly slug: string | null, readonly instagram: string | null, readonly facebook: string | null, readonly website: string | null, readonly pinterest: string | null, readonly service: string | null, readonly excerpt: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly testimonials: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly review: string | null, readonly stars: number | null, readonly customer: string | null, readonly position: string | null } | null> | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null, readonly allStrapiVendor: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly id: string, readonly slug: string | null, readonly excerpt: string | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> } };

type venueAreaInfoFragment = { readonly area: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly state: string | null, readonly tagline: string | null, readonly featured: boolean | null } | null };

type venueCardFragment = { readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type VenuesQueryQueryVariables = Exact<{ [key: string]: never; }>;


type VenuesQueryQuery = { readonly allStrapiVenue: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly excerpt: string | null, readonly slug: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly area: { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly state: string | null, readonly tagline: string | null, readonly featured: boolean | null } | null }> } };

type VenueTemplateQueryVariables = Exact<{
  slug: Scalars['String'];
  area: Scalars['String'];
}>;


type VenueTemplateQuery = { readonly strapiVenue: { readonly id: string, readonly name: string | null, readonly description: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly website: string | null, readonly phone: number | null, readonly area: { readonly name: string | null, readonly state: string | null, readonly slug: string | null, readonly featured: boolean | null, readonly region: { readonly name: string | null, readonly slug: string | null } | null } | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly url: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly projects: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly image: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null, readonly testimonials: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly review: string | null, readonly stars: number | null, readonly customer: string | null, readonly position: string | null, readonly vendor: { readonly name: string | null } | null } | null> | null } | null, readonly allStrapiVenue: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly id: string, readonly slug: string | null, readonly excerpt: string | null, readonly venueImage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly area: { readonly name: string | null, readonly state: string | null } | null }> } };


}
